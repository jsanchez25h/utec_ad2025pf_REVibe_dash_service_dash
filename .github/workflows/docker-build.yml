name: CI/CD dashboard-kpi-service-g4

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:

env:
  AWS_REGION   : ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO     : ${{ secrets.ECR_REPO }}       # dashboard-kpi-service-g4

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout
    - uses: actions/checkout@v4

    # 2) AWS creds (login to ECR)
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # 3) Asegura repo ECR y login
    - name: Ensure ECR repo & login
      id: ecr
      run: |
        set -e
        repo_uri=$(aws ecr describe-repositories \
            --repository-names "$ECR_REPO" \
            --query 'repositories[0].repositoryUri' \
            --output text 2>/dev/null || true)

        if [ -z "$repo_uri" ]; then
          echo "::notice::ECR repo $ECR_REPO not found – creating"
          repo_uri=$(aws ecr create-repository \
              --repository-name "$ECR_REPO" \
              --image-scanning-configuration scanOnPush=true \
              --query 'repository.repositoryUri' \
              --output text)
        fi

        echo "repo=$repo_uri" >> "$GITHUB_OUTPUT"
        aws ecr get-login-password --region "$AWS_REGION" \
          | docker login --username AWS --password-stdin "$repo_uri"

    # 4) Build sin cache  + push (:sha & :latest)
    - name: Build & push image
      id: build
      env:
        REPO_URI : ${{ steps.ecr.outputs.repo }}
        TAG_SHA  : ${{ github.sha }}
      run: |
        set -eux
        SHORT=${TAG_SHA::7}
        IMAGE_COMMIT=${REPO_URI}:${SHORT}
        IMAGE_LATEST=${REPO_URI}:latest

        # Apple Silicon? añade --platform linux/amd64
        docker build --pull --no-cache \
          -t "$IMAGE_COMMIT" .

        docker tag "$IMAGE_COMMIT" "$IMAGE_LATEST"

        docker push "$IMAGE_COMMIT"
        docker push "$IMAGE_LATEST"

        echo "image=$IMAGE_COMMIT"       >> "$GITHUB_OUTPUT"
        echo "image_latest=$IMAGE_LATEST" >> "$GITHUB_OUTPUT"

    # 5) Dispara el repo de infraestructura
    - name: Trigger infra deploy
      uses: peter-evans/repository-dispatch@v3
      with:
        token:      ${{ secrets.INFRA_TOKEN }}
        repository: jsanchez25h/utec_ad2025pf_REVibe_infra-deployments
        event-type: deploy_dashboard_kpi
        client-payload: |
          { "image": "${{ steps.build.outputs.image_latest }}" }
